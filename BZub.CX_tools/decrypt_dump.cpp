/*
    Decrypt Dump
    -
    INTECO-CERT
    -
    David Reguera García 
    david.reguera@inteco.es
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define SIZE_DUMP   0xD8
#define OFFSET_DUMP 0x015800 
#define BLOCKS      8

int DecryptDump    ( FILE *, int, char ** );
int  _DecryptDump  ( FILE *, FILE * );
void WriteDump     ( FILE *, unsigned char * );
void ShowBlock     ( FILE *, int, unsigned char *, char * );
int  __DecryptDump ( unsigned char * );

int main( int argc, char * argv[] )
{
    int    return_function;
    FILE * troyan_file;
    
    return_function = 0;
    
        puts
    (
        "\n"
        " David Reguera Garcia                        \n"
        " --------------------------------------------\n"
        " Decrypt Dump  [ v1.0 ]    -    INTECO-CERT   \n"
        "____________________________________________________\n\n"
    );
    
    if ( argc < 2 )
    {
        return_function = -1;
        printf( " Uso: %s troyano.exe [dump_file]\n\n", argv[0] );
    }
    else
    {
        troyan_file = fopen( argv[1], "r" );
        if ( troyan_file == NULL )
        {
            perror( "" );
            return_function = -1;
        }
    }
    
    if ( return_function == 0 )
    { 
        return_function = DecryptDump( troyan_file, argc, argv );
        
        if ( fclose( troyan_file ) == EOF )
            perror( "" );
    }
    
    getchar();

    return return_function;
}

int DecryptDump( FILE * troyan_file, int argc, char * argv[] )
{
    int    return_function;
    FILE * file_dump;
    
    if ( argc < 3 )
        file_dump = stdout;
    else if ( argc == 3  )
    {
        file_dump = fopen( argv[2], "a" );
        if ( file_dump == NULL )
        {
            perror( "" );
            return -1;
        }
    }
    else
    {
        printf( " Uso: %s troyano.exe [dump_file]\n\n", argv[0] );
        return -1;
    }

    return_function = _DecryptDump( troyan_file, file_dump );

    if ( argc == 3 )
        if ( fclose( file_dump ) == EOF )
            perror( "" );

    return return_function;
}

int _DecryptDump( FILE * troyan_file, FILE * file_dump )
{
    unsigned char * data_dump;
    int             return_function;
    
    return_function = 0;
    
    if ( fseek( troyan_file, OFFSET_DUMP, SEEK_SET ) == -1 )
    {
        perror( "" );
        return -1;
    }
    
    data_dump = ( unsigned char * ) calloc( 1, SIZE_DUMP );
    if ( data_dump == NULL )
    {
        puts( " Error: al asignar memoria dinamicamente.\n" );
        return -1;
    }

    if ( fread( (void *) data_dump, SIZE_DUMP, 1, troyan_file ) != 1 )
    {
        puts( " Error: no se ha podido leer el dump del fichero.\n" );
        return_function = -1;
    }
    
    if ( return_function == 0 )
    {
        fprintf( file_dump, " Mostrando Dump Cifrado....\n\n" );
    
        WriteDump( file_dump, data_dump );

        fprintf( file_dump, "\n\n" );

        if ( __DecryptDump( data_dump ) == -1 )
            return_function = -1;
    }

    if ( return_function == 0 )
    {
        fprintf( file_dump, " Mostrando Dump Descifrado....\n\n" );

        WriteDump( file_dump, data_dump );
    }
    
    free( data_dump );

    return return_function;
}

void WriteDump( FILE * file_dump, unsigned char * data_dump )
{
    int          i;
    int          blocks = BLOCKS;
    unsigned int total_blocks;
    unsigned int size_last_block;
    unsigned int actual_size_block;
    
    fprintf
    ( 
        file_dump,
        
        " HEX                  |  ASCII            \n"
        " ------------------------------------------\n"
    );
    
    total_blocks    = SIZE_DUMP / blocks;
    size_last_block = SIZE_DUMP % blocks;
    
    if ( size_last_block > 0 )
        total_blocks++;
    
    actual_size_block = BLOCKS; 
       
    for ( i = 0; i < total_blocks; i++ )
    {
        if ( size_last_block > 0 )
            if ( i == (total_blocks - 1) )
                actual_size_block = size_last_block;    
        ShowBlock( file_dump, actual_size_block, & data_dump[BLOCKS * i], "HEX" );
        fprintf( file_dump, "    | " );
        ShowBlock( file_dump, actual_size_block, & data_dump[BLOCKS * i], "ASC" );
        fprintf( file_dump, "\n" );
    }
}

void ShowBlock( FILE * file_dump, int blocks, unsigned char * data_block, char * type )
{
    int i;
    
    for ( i = 0; i < blocks; i++ )
    {    
        if ( strcmp( type, "ASC" ) == 0 )
            if ( isprint( data_block[i] ) )
                fprintf( file_dump, " %c", data_block[i] );
            else
                fprintf( file_dump, " " );
        else
            fprintf( file_dump, " %02X", data_block[i] );
    }
}

int __DecryptDump( unsigned char * crypt_dump )
{
    int i;
    
    for ( i = 1; i < SIZE_DUMP; i++ )
        crypt_dump[i] ^= (i * i);
    
    return 0;
}
